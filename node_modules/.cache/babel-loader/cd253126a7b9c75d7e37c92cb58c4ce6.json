{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nconst {\n  get,\n  set\n} = useStorage();\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState([]);\n  const {\n    getPhoto\n  } = useCamera();\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // \"hybrid\" will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/pranavmainkar/Sites/photo-gallery/src/hooks/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","isPlatform","CameraResultType","CameraSource","Capacitor","FilesystemDirectory","PHOTO_STORAGE","get","set","usePhotoGallery","photos","setPhotos","getPhoto","deleteFile","getUri","readFile","writeFile","loadSaved","photosString","JSON","parse","photo","file","path","filepath","directory","Data","webviewPath","data","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","stringify","base64Data","webPath","savedFile","uri","convertFileSrc"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nconst { get, set } = useStorage();\n\n\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { getPhoto } = useCamera();\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n      }\n      setPhotos(photos);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    let base64Data: string;\n    // \"hybrid\" will detect Cordova or Capacitor;\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path!\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath!);\n    }\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n}\n"]},"metadata":{},"sourceType":"module"}