{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState([]);\n  const {\n    getPhoto\n  } = useCamera();\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  const {\n    get,\n    set\n  } = useStorage();\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photosInStorage = photosString ? JSON.parse(photosString) : []; // If running on the web...\n\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n          }); // Web platform only: Load photo as base64 data\n\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n\n      setPhotos(photosInStorage);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo, fileName) => {\n    let base64Data; // \"hybrid\" will detect Cordova or Capacitor;\n\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath);\n    }\n\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri)\n      };\n    } else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/pranavmainkar/Sites/photo-gallery/src/hooks/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","isPlatform","CameraResultType","CameraSource","Capacitor","FilesystemDirectory","PHOTO_STORAGE","usePhotoGallery","photos","setPhotos","getPhoto","deleteFile","getUri","readFile","writeFile","get","set","loadSaved","photosString","photosInStorage","JSON","parse","photo","file","path","filepath","directory","Data","webviewPath","data","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","stringify","base64Data","webPath","savedFile","uri","convertFileSrc"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\n\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { getPhoto } = useCamera();\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n  const { get, set } = useStorage();\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get('photos');\n      const photosInStorage = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      // If running on the web...\n      if (!isPlatform('hybrid')) {\n        for (let photo of photosInStorage) {\n          const file = await readFile({\n            path: photo.filepath,\n            directory: FilesystemDirectory.Data\n          });\n          // Web platform only: Load photo as base64 data\n          photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n        }\n      }\n      setPhotos(photosInStorage);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    let base64Data: string;\n    // \"hybrid\" will detect Cordova or Capacitor;\n    if (isPlatform('hybrid')) {\n      const file = await readFile({\n        path: photo.path!\n      });\n      base64Data = file.data;\n    } else {\n      base64Data = await base64FromPath(photo.webPath!);\n    }\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    if (isPlatform('hybrid')) {\n      // Display the new image by rewriting the 'file://' path to HTTP\n      // Details: https://ionicframework.com/docs/building/webview#file-protocol\n      return {\n        filepath: savedFile.uri,\n        webviewPath: Capacitor.convertFileSrc(savedFile.uri),\n      };\n    }\n    else {\n      // Use webPath to display the new image instead of base64 since it's\n      // already loaded into memory\n      return {\n        filepath: fileName,\n        webviewPath: photo.webPath\n      };\n    }\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n}\n"]},"metadata":{},"sourceType":"module"}