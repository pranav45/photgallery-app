{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { CameraResultType, CameraSource, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nconst {\n  get,\n  set\n} = useStorage();\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState([]);\n  const {\n    getPhoto\n  } = useCamera();\n  const {\n    deleteFile,\n    getUri,\n    readFile,\n    writeFile\n  } = useFilesystem();\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = photosString ? JSON.parse(photosString) : [];\n\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n      }\n\n      setPhotos(photos);\n    };\n\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo, fileName) => {\n    const base64Data = await base64FromPath(photo.webPath);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    }); // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}","map":{"version":3,"sources":["/Users/pranavmainkar/Sites/photo-gallery/src/hooks/usePhotoGallery.ts"],"names":["useState","useEffect","useCamera","useFilesystem","base64FromPath","useStorage","CameraResultType","CameraSource","FilesystemDirectory","PHOTO_STORAGE","get","set","usePhotoGallery","photos","setPhotos","getPhoto","deleteFile","getUri","readFile","writeFile","loadSaved","photosString","JSON","parse","photo","file","path","filepath","directory","Data","webviewPath","data","takePhoto","cameraPhoto","resultType","Uri","source","Camera","quality","fileName","Date","getTime","savedFileImage","savePicture","newPhotos","stringify","base64Data","webPath","savedFile"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,+BAA9C;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,SAASC,gBAAT,EAA2BC,YAA3B,EAAiEC,mBAAjE,QAA4F,iBAA5F;AACA,MAAMC,aAAa,GAAG,QAAtB;AACA,MAAM;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,IAAeN,UAAU,EAA/B;AAGA,OAAO,SAASO,eAAT,GAA2B;AAChC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAU,EAAV,CAApC;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAeb,SAAS,EAA9B;AACA,QAAM;AAAEc,IAAAA,UAAF;AAAcC,IAAAA,MAAd;AAAsBC,IAAAA,QAAtB;AAAgCC,IAAAA;AAAhC,MAA8ChB,aAAa,EAAjE;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,SAAS,GAAG,YAAY;AAC5B,YAAMC,YAAY,GAAG,MAAMX,GAAG,CAACD,aAAD,CAA9B;AACA,YAAMI,MAAM,GAAIQ,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWF,YAAX,CAAH,GAA8B,EAA1D;;AACA,WAAK,IAAIG,KAAT,IAAkBX,MAAlB,EAA0B;AACxB,cAAMY,IAAI,GAAG,MAAMP,QAAQ,CAAC;AAC1BQ,UAAAA,IAAI,EAAEF,KAAK,CAACG,QADc;AAE1BC,UAAAA,SAAS,EAAEpB,mBAAmB,CAACqB;AAFL,SAAD,CAA3B;AAIAL,QAAAA,KAAK,CAACM,WAAN,GAAqB,0BAAyBL,IAAI,CAACM,IAAK,EAAxD;AACD;;AACDjB,MAAAA,SAAS,CAACD,MAAD,CAAT;AACD,KAXD;;AAYAO,IAAAA,SAAS;AACV,GAdQ,EAcN,CAACV,GAAD,EAAMQ,QAAN,CAdM,CAAT;;AAgBA,QAAMc,SAAS,GAAG,YAAY;AAC5B,UAAMC,WAAW,GAAG,MAAMlB,QAAQ,CAAC;AACjCmB,MAAAA,UAAU,EAAE5B,gBAAgB,CAAC6B,GADI;AAEjCC,MAAAA,MAAM,EAAE7B,YAAY,CAAC8B,MAFY;AAGjCC,MAAAA,OAAO,EAAE;AAHwB,KAAD,CAAlC;AAKA,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,OAAxC;AACA,UAAMC,cAAc,GAAG,MAAMC,WAAW,CAACV,WAAD,EAAcM,QAAd,CAAxC;AACA,UAAMK,SAAS,GAAG,CAACF,cAAD,EAAiB,GAAG7B,MAApB,CAAlB;AACAF,IAAAA,GAAG,CAACF,aAAD,EAAgBa,IAAI,CAACuB,SAAL,CAAeD,SAAf,CAAhB,CAAH;AACD,GAVD;;AAYA,QAAMD,WAAW,GAAG,OAAOnB,KAAP,EAA2Be,QAA3B,KAAgE;AAClF,UAAMO,UAAU,GAAG,MAAM1C,cAAc,CAACoB,KAAK,CAACuB,OAAP,CAAvC;AACA,UAAMC,SAAS,GAAG,MAAM7B,SAAS,CAAC;AAChCO,MAAAA,IAAI,EAAEa,QAD0B;AAEhCR,MAAAA,IAAI,EAAEe,UAF0B;AAGhClB,MAAAA,SAAS,EAAEpB,mBAAmB,CAACqB;AAHC,KAAD,CAAjC,CAFkF,CAQlF;AACA;;AACA,WAAO;AACLF,MAAAA,QAAQ,EAAEY,QADL;AAELT,MAAAA,WAAW,EAAEN,KAAK,CAACuB;AAFd,KAAP;AAID,GAdD;;AAgBA,SAAO;AACLlC,IAAAA,MADK;AAELmB,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useCamera } from '@ionic/react-hooks/camera';\nimport { useFilesystem, base64FromPath } from '@ionic/react-hooks/filesystem';\nimport { useStorage } from '@ionic/react-hooks/storage';\nimport { isPlatform } from '@ionic/react';\nimport { CameraResultType, CameraSource, CameraPhoto, Capacitor, FilesystemDirectory } from \"@capacitor/core\";\nconst PHOTO_STORAGE = \"photos\";\nconst { get, set } = useStorage();\n\n\nexport function usePhotoGallery() {\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const { getPhoto } = useCamera();\n  const { deleteFile, getUri, readFile, writeFile } = useFilesystem();\n\n  useEffect(() => {\n    const loadSaved = async () => {\n      const photosString = await get(PHOTO_STORAGE);\n      const photos = (photosString ? JSON.parse(photosString) : []) as Photo[];\n      for (let photo of photos) {\n        const file = await readFile({\n          path: photo.filepath,\n          directory: FilesystemDirectory.Data\n        });\n        photo.webviewPath = `data:image/jpeg;base64,${file.data}`;\n      }\n      setPhotos(photos);\n    };\n    loadSaved();\n  }, [get, readFile]);\n\n  const takePhoto = async () => {\n    const cameraPhoto = await getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100\n    });\n    const fileName = new Date().getTime() + '.jpeg';\n    const savedFileImage = await savePicture(cameraPhoto, fileName);\n    const newPhotos = [savedFileImage, ...photos];\n    set(PHOTO_STORAGE, JSON.stringify(newPhotos));\n  };\n\n  const savePicture = async (photo: CameraPhoto, fileName: string): Promise<Photo> => {\n    const base64Data = await base64FromPath(photo.webPath!);\n    const savedFile = await writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: FilesystemDirectory.Data\n    });\n\n    // Use webPath to display the new image instead of base64 since it's\n    // already loaded into memory\n    return {\n      filepath: fileName,\n      webviewPath: photo.webPath\n    };\n  };\n\n  return {\n    photos,\n    takePhoto\n  };\n}\nexport interface Photo {\n  filepath: string;\n  webviewPath?: string;\n}\n"]},"metadata":{},"sourceType":"module"}